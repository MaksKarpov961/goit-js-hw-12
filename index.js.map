{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["// Базовий URL для запитів до API Pixabay\nconst API_URL = 'https://pixabay.com/api/?';\n// Ключ доступу до API Pixabay\nconst API_KEY = '45713433-433c1b648e48abad27090f3cc';\n\n// Функція для отримання даних з API Pixabay\nexport function getGalleryData(queryValue) {\n  // Створюємо параметри запиту\n  const searchParams = new URLSearchParams({\n    key: API_KEY,           // API ключ\n    q: queryValue,          // Пошуковий запит\n    image_type: 'photo',    // Тип зображення (фото)\n    orientation: 'horizontal', // Горизонтальна орієнтація зображення\n    safesearch: true,       // Включений безпечний пошук\n  });\n\n  // Виконуємо запит до API і повертаємо результат\n  return fetch(`${API_URL}${searchParams}`)\n    .then(response => {\n      // Перевіряємо, чи запит успішний (код 200)\n      if (!response.ok) {\n        // Якщо запит не успішний, кидаємо помилку\n        throw new Error(response.status);\n      }\n      // Повертаємо дані у форматі JSON\n      return response.json();\n    });\n}\n","// Функція для додавання лоадера на інтерфейс\nexport function addLoader(gallery) {\n  // Створюємо HTML для лоадера\n  const loaderHTML = '<span class=\"loader\"></span>';\n  \n  // Вставляємо лоадер перед галереєю\n  gallery.insertAdjacentHTML('beforebegin', loaderHTML);\n}\n\n// Функція для видалення лоадера з інтерфейсу\nexport function removeLoader() {\n  // Знаходимо елемент лоадера\n  const loader = document.querySelector('.loader');\n  \n  // Якщо лоадер знайдено, видаляємо його з DOM\n  if (loader) {\n    loader.remove();\n  }\n}\n\n// Функція для створення розмітки галереї\nexport function markup(data) {\n  // Створюємо HTML-розмітку для кожного зображення\n  return data.hits\n    .map(\n      ({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => `\n            <li class=\"gallery-item hvr-grow\">\n              <a class=\"gallery-link\" href=\"${largeImageURL}\">\n                <img\n                  class=\"gallery-image\"\n                  src=\"${webformatURL}\"\n                  alt=\"${tags}\"\n                  loading=\"lazy\"\n              /></a>\n              <ul class=\"img-content-wrapper\">\n                <li class=\"img-content-descr\">Likes<span>${likes}</span></li>\n                <li class=\"img-content-descr\">Views<span>${views}</span></li>\n                <li class=\"img-content-descr\">Comments<span>${comments}</span></li>\n                <li class=\"img-content-descr\">Downloads<span>${downloads}</span></li>\n              </ul>\n            </li>\n      `\n    )\n    .join(''); // Перетворюємо масив у строку HTML\n}\n","// Імпорт бібліотеки axios для запитів на сервер\nimport axios from \"axios\";\n\n// Імпорт функції для запиту до API з файлу pixabay-api.js\nimport { getGalleryData } from './js/pixabay-api';\n\n// Імпорт функцій для роботи з інтерфейсом з файлу render-functions.js\nimport { addLoader, removeLoader, markup } from './js/render-functions';\n\n// Імпорт бібліотеки iziToast для сповіщень\nimport iziToast from 'izitoast'; \nimport 'izitoast/dist/css/iziToast.min.css'; // Імпорт стилів для iziToast\n\n// Імпорт бібліотеки SimpleLightbox для лайтбоксу\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css'; // Імпорт стилів для SimpleLightbox\n\n// Отримуємо форму пошуку за допомогою querySelector\nconst form = document.querySelector('.search-form');\n\n// Отримуємо контейнер для галереї\nconst gallery = document.querySelector('.gallery');\n\n// Ініціалізуємо SimpleLightbox для галереї\nlet lightbox = new SimpleLightbox('.gallery a', {\n  captionsData: 'alt', // Використовуємо атрибут alt як підпис до зображень\n  captionDelay: 250,   // Затримка перед показом підпису\n});\n\n// Додаємо обробник події submit до форми\nform.addEventListener('submit', onSubmitForm);\n\n// Функція обробки події submit на формі\nfunction onSubmitForm(event) {\n  // Зупиняємо стандартну поведінку форми (перезавантаження сторінки)\n  event.preventDefault();\n\n  // Створюємо об'єкт FormData для отримання даних з форми\n  const formData = new FormData(event.target);\n\n  // Преобразовуємо FormData у звичайний об'єкт і отримуємо поле пошуку\n  const { search } = Object.fromEntries(formData.entries());\n\n  // Обрізаємо зайві пробіли на початку та в кінці введеного значення\n  const searchValue = search.trim();\n\n  // Якщо значення пошуку порожнє, показуємо помилку і виходимо з функції\n  if (!searchValue) {\n    iziToast.error({\n      title: 'Error',\n      message: 'The search query is empty.',\n      position: 'topRight',\n    });\n    return;\n  }\n\n  // Додаємо анімацію лоадера до інтерфейсу\n  addLoader(gallery);\n\n  // Викликаємо функцію для отримання зображень за пошуковим запитом\n  getGalleryData(searchValue)\n    .then(data => {\n      // Очищаємо галерею перед додаванням нових елементів\n      gallery.innerHTML = '';\n\n      // Якщо за запитом не знайдено зображень, показуємо відповідне сповіщення\n      if (data.hits.length === 0) {\n        iziToast.info({\n          position: 'topRight',\n          title: 'Info',\n          message: 'Sorry, there are no images matching your search query. Please try again!',\n        });\n        return;\n      }\n\n      // Створюємо HTML-розмітку для галереї на основі отриманих даних\n      const galleryMarkup = markup(data);\n\n      // Додаємо створену розмітку до контейнера галереї\n      gallery.insertAdjacentHTML('beforeend', galleryMarkup);\n\n      // Оновлюємо SimpleLightbox після додавання нових елементів\n      lightbox.refresh();\n    })\n    .catch(error => {\n      // Якщо виникла помилка, показуємо сповіщення з описом помилки\n      console.error('Помилка:', error);\n      iziToast.error({\n        title: 'Error',\n        message: `Error: ${error.message}`,\n        position: 'topRight',\n      });\n    })\n    .finally(() => {\n      // Видаляємо лоадер після завершення запиту\n      removeLoader();\n    });\n}\n"],"names":["API_URL","API_KEY","getGalleryData","queryValue","searchParams","response","addLoader","gallery","removeLoader","loader","markup","data","webformatURL","largeImageURL","tags","likes","views","comments","downloads","form","lightbox","SimpleLightbox","onSubmitForm","event","formData","search","searchValue","iziToast","galleryMarkup","error"],"mappings":"wvBACA,MAAMA,EAAU,4BAEVC,EAAU,qCAGT,SAASC,EAAeC,EAAY,CAEzC,MAAMC,EAAe,IAAI,gBAAgB,CACvC,IAAKH,EACL,EAAGE,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EAChB,CAAG,EAGD,OAAO,MAAM,GAAGH,CAAO,GAAGI,CAAY,EAAE,EACrC,KAAKC,GAAY,CAEhB,GAAI,CAACA,EAAS,GAEZ,MAAM,IAAI,MAAMA,EAAS,MAAM,EAGjC,OAAOA,EAAS,MACtB,CAAK,CACL,CC1BO,SAASC,EAAUC,EAAS,CAKjCA,EAAQ,mBAAmB,cAHR,8BAGiC,CACtD,CAGO,SAASC,GAAe,CAE7B,MAAMC,EAAS,SAAS,cAAc,SAAS,EAG3CA,GACFA,EAAO,OAAM,CAEjB,CAGO,SAASC,EAAOC,EAAM,CAE3B,OAAOA,EAAK,KACT,IACC,CAAC,CAAE,aAAAC,EAAc,cAAAC,EAAe,KAAAC,EAAM,MAAAC,EAAO,MAAAC,EAAO,SAAAC,EAAU,UAAAC,CAAS,IAAO;AAAA;AAAA,8CAEtCL,CAAa;AAAA;AAAA;AAAA,yBAGlCD,CAAY;AAAA,yBACZE,CAAI;AAAA;AAAA;AAAA;AAAA,2DAI8BC,CAAK;AAAA,2DACLC,CAAK;AAAA,8DACFC,CAAQ;AAAA,+DACPC,CAAS;AAAA;AAAA;AAAA,OAInE,EACA,KAAK,EAAE,CACZ,CC1BA,MAAMC,EAAO,SAAS,cAAc,cAAc,EAG5CZ,EAAU,SAAS,cAAc,UAAU,EAGjD,IAAIa,EAAW,IAAIC,EAAe,aAAc,CAC9C,aAAc,MACd,aAAc,GAChB,CAAC,EAGDF,EAAK,iBAAiB,SAAUG,CAAY,EAG5C,SAASA,EAAaC,EAAO,CAE3BA,EAAM,eAAc,EAGpB,MAAMC,EAAW,IAAI,SAASD,EAAM,MAAM,EAGpC,CAAE,OAAAE,CAAM,EAAK,OAAO,YAAYD,EAAS,QAAO,CAAE,EAGlDE,EAAcD,EAAO,OAG3B,GAAI,CAACC,EAAa,CAChBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,6BACT,SAAU,UAChB,CAAK,EACD,MACD,CAGDrB,EAAUC,CAAO,EAGjBL,EAAewB,CAAW,EACvB,KAAKf,GAAQ,CAKZ,GAHAJ,EAAQ,UAAY,GAGhBI,EAAK,KAAK,SAAW,EAAG,CAC1BgB,EAAS,KAAK,CACZ,SAAU,WACV,MAAO,OACP,QAAS,0EACnB,CAAS,EACD,MACD,CAGD,MAAMC,EAAgBlB,EAAOC,CAAI,EAGjCJ,EAAQ,mBAAmB,YAAaqB,CAAa,EAGrDR,EAAS,QAAO,CACtB,CAAK,EACA,MAAMS,GAAS,CAEd,QAAQ,MAAM,WAAYA,CAAK,EAC/BF,EAAS,MAAM,CACb,MAAO,QACP,QAAS,UAAUE,EAAM,OAAO,GAChC,SAAU,UAClB,CAAO,CACP,CAAK,EACA,QAAQ,IAAM,CAEbrB,GACN,CAAK,CACL"}